# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `datacite` gem.
# Please instead update this file by running `bin/tapioca gem datacite`.


# source://datacite//lib/datacite.rb#7
module Datacite; end

# The JSON request to create a random DOI
#
# source://datacite//lib/datacite/autogenerate_doi_request_body.rb#5
class Datacite::AutogenerateDoiRequestBody
  # @param prefix [String]
  # @return [AutogenerateDoiRequestBody] a new instance of AutogenerateDoiRequestBody
  #
  # source://datacite//lib/datacite/autogenerate_doi_request_body.rb#7
  def initialize(prefix:); end

  # source://datacite//lib/datacite/autogenerate_doi_request_body.rb#12
  def to_json(*_args); end

  private

  # Returns the value of attribute prefix.
  #
  # source://datacite//lib/datacite/autogenerate_doi_request_body.rb#25
  def prefix; end
end

# The connection to DataCite API
#
# source://datacite//lib/datacite/client.rb#9
class Datacite::Client
  include ::Dry::Monads::Result::Mixin::Constructors
  include ::Dry::Monads::Result::Mixin

  # @param username [String]
  # @param password [String]
  # @param host [String]
  # @return [Client] a new instance of Client
  #
  # source://datacite//lib/datacite/client.rb#15
  def initialize(username:, password:, host: T.unsafe(nil)); end

  # Creates a random DOI
  #
  # @param prefix [String]
  #
  # source://datacite//lib/datacite/client.rb#29
  def autogenerate_doi(prefix:); end

  # Creates a specific DOI
  #
  # @param prefix [String]
  # @param suffix [String]
  #
  # source://datacite//lib/datacite/client.rb#38
  def register_doi(prefix:, suffix:); end

  # Update a DOI
  #
  # @param id [String]
  # @param value [String]
  #
  # source://datacite//lib/datacite/client.rb#47
  def update(id:, attributes:); end

  private

  # Returns the value of attribute conn.
  #
  # source://datacite//lib/datacite/client.rb#74
  def conn; end

  # source://datacite//lib/datacite/client.rb#67
  def headers; end

  # source://datacite//lib/datacite/client.rb#62
  def register(request_body); end
end

# source://datacite//lib/datacite.rb#8
class Datacite::Error < ::StandardError; end

# The JSON request to create a specific DOI
#
# source://datacite//lib/datacite/register_doi_request_body.rb#5
class Datacite::RegisterDoiRequestBody
  # @param prefix [String]
  # @param suffix [String]
  # @return [RegisterDoiRequestBody] a new instance of RegisterDoiRequestBody
  #
  # source://datacite//lib/datacite/register_doi_request_body.rb#8
  def initialize(prefix:, suffix:); end

  # source://datacite//lib/datacite/register_doi_request_body.rb#14
  def to_json(*_args); end

  private

  # Returns the value of attribute prefix.
  #
  # source://datacite//lib/datacite/register_doi_request_body.rb#27
  def prefix; end

  # Returns the value of attribute suffix.
  #
  # source://datacite//lib/datacite/register_doi_request_body.rb#27
  def suffix; end
end

# The response object from the datacite API
#
# source://datacite//lib/datacite/response.rb#5
class Datacite::Response
  # @param response [Hash] a json reponse
  # @return [Response] a new instance of Response
  #
  # source://datacite//lib/datacite/response.rb#7
  def initialize(response); end

  # Returns the value of attribute body.
  #
  # source://datacite//lib/datacite/response.rb#11
  def body; end

  # source://datacite//lib/datacite/response.rb#13
  def doi; end
end

# source://datacite//lib/datacite/version.rb#4
Datacite::VERSION = T.let(T.unsafe(nil), String)

# Validates the request data is valid
#
# source://datacite//lib/datacite/validator.rb#7
class Datacite::Validator
  class << self
    # source://datacite//lib/datacite/validator.rb#8
    def validate!(data); end
  end
end
