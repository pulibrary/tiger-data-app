# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `omniauth-cas` gem.
# Please instead update this file by running `bin/tapioca gem omniauth-cas`.


# source://omniauth-cas//lib/omniauth/strategies/cas.rb#4
module OmniAuth
  class << self
    # source://omniauth/1.9.2/lib/omniauth.rb#118
    def config; end

    # source://omniauth/1.9.2/lib/omniauth.rb#122
    def configure; end

    # source://omniauth/1.9.2/lib/omniauth.rb#126
    def logger; end

    # source://omniauth/1.9.2/lib/omniauth.rb#130
    def mock_auth_for(provider); end

    # source://omniauth/1.9.2/lib/omniauth.rb#19
    def strategies; end
  end
end

# source://omniauth-cas//lib/omniauth/strategies/cas.rb#5
module OmniAuth::Strategies; end

# source://omniauth-cas//lib/omniauth/strategies/cas.rb#6
class OmniAuth::Strategies::CAS
  include ::OmniAuth::Strategy
  extend ::OmniAuth::Strategy::ClassMethods

  # Adds URL-escaped +parameters+ to +base+.
  #
  # @param base [String] the base URL
  # @param params [String] the parameters to append to the URL
  # @return [String] the new joined URL.
  #
  # source://omniauth-cas//lib/omniauth/strategies/cas.rb#177
  def append_params(base, params); end

  # source://omniauth-cas//lib/omniauth/strategies/cas.rb#79
  def callback_phase; end

  # Build a CAS host with protocol and port
  #
  # source://omniauth-cas//lib/omniauth/strategies/cas.rb#115
  def cas_url; end

  # source://omniauth-cas//lib/omniauth/strategies/cas.rb#128
  def extract_url; end

  # Build a CAS login URL from +service+.
  #
  # @param service [String] the service (a.k.a. return-to) URL
  # @return [String] a URL like `http://cas.mycompany.com/login?service=...`
  #
  # source://omniauth-cas//lib/omniauth/strategies/cas.rb#167
  def login_url(service); end

  # @return [Boolean]
  #
  # source://omniauth-cas//lib/omniauth/strategies/cas.rb#104
  def on_sso_path?; end

  # Returns the value of attribute raw_info.
  #
  # source://omniauth-cas//lib/omniauth/strategies/cas.rb#16
  def raw_info; end

  # Sets the attribute raw_info
  #
  # @param value the value to set the attribute raw_info to.
  #
  # source://omniauth-cas//lib/omniauth/strategies/cas.rb#16
  def raw_info=(_arg0); end

  # source://omniauth-cas//lib/omniauth/strategies/cas.rb#91
  def request_phase; end

  # Build a service-validation URL from +service+ and +ticket+.
  # If +service+ has a ticket param, first remove it. URL-encode
  # +service+ and add it and the +ticket+ as paraemters to the
  # CAS serviceValidate URL.
  #
  # @param service [String] the service (a.k.a. return-to) URL
  # @param ticket [String] the ticket to validate
  # @return [String] a URL like `http://cas.mycompany.com/serviceValidate?service=...&ticket=...`
  #
  # source://omniauth-cas//lib/omniauth/strategies/cas.rb#153
  def service_validate_url(service_url, ticket); end

  # source://omniauth-cas//lib/omniauth/strategies/cas.rb#108
  def single_sign_out_phase; end

  # Returns the value of attribute raw_info.
  #
  # source://omniauth-cas//lib/omniauth/strategies/cas.rb#16
  def user_info; end

  # source://omniauth-cas//lib/omniauth/strategies/cas.rb#138
  def validate_cas_setup; end

  # Validate the Service Ticket
  #
  # @return [Object] the validated Service Ticket
  #
  # source://omniauth-cas//lib/omniauth/strategies/cas.rb#186
  def validate_service_ticket(ticket); end

  private

  # A Proc or lambda that returns a Hash of additional user info to be
  # merged with the info returned by the CAS server.
  #
  # @param An [Object] instance of OmniAuth::Strategies::CAS for the current request
  # @param The [String] user's Service Ticket value
  # @param The [Hash] user info for the Service Ticket returned by the CAS server
  # @return [Hash] Extra user info
  #
  # source://omniauth-cas//lib/omniauth/strategies/cas.rb#192
  def fetch_raw_info(ticket); end

  # source://omniauth-cas//lib/omniauth/strategies/cas.rb#219
  def logout_request_service; end

  # Deletes Hash pairs with `nil` values.
  # From https://github.com/mkdynamic/omniauth-facebook/blob/972ed5e3456bcaed7df1f55efd7c05c216c8f48e/lib/omniauth/strategies/facebook.rb#L122-127
  #
  # source://omniauth-cas//lib/omniauth/strategies/cas.rb#203
  def prune!(hash); end

  # source://omniauth-cas//lib/omniauth/strategies/cas.rb#210
  def return_url; end
end

# As required by https://github.com/intridea/omniauth/wiki/Auth-Hash-Schema
#
# source://omniauth-cas//lib/omniauth/strategies/cas.rb#51
OmniAuth::Strategies::CAS::AuthHashSchemaKeys = T.let(T.unsafe(nil), Array)

# source://omniauth-cas//lib/omniauth/strategies/cas.rb#11
class OmniAuth::Strategies::CAS::InvalidCASTicket < ::StandardError; end

# source://omniauth-cas//lib/omniauth/strategies/cas/logout_request.rb#4
class OmniAuth::Strategies::CAS::LogoutRequest
  # @return [LogoutRequest] a new instance of LogoutRequest
  #
  # source://omniauth-cas//lib/omniauth/strategies/cas/logout_request.rb#5
  def initialize(strategy, request); end

  # source://omniauth-cas//lib/omniauth/strategies/cas/logout_request.rb#9
  def call(options = T.unsafe(nil)); end

  private

  # source://omniauth-cas//lib/omniauth/strategies/cas/logout_request.rb#41
  def inject_params(new_params); end

  # source://omniauth-cas//lib/omniauth/strategies/cas/logout_request.rb#31
  def logout_request; end

  # source://omniauth-cas//lib/omniauth/strategies/cas/logout_request.rb#52
  def single_sign_out_callback; end
end

# Custom Exceptions
#
# source://omniauth-cas//lib/omniauth/strategies/cas.rb#10
class OmniAuth::Strategies::CAS::MissingCASTicket < ::StandardError; end

# source://omniauth-cas//lib/omniauth/strategies/cas/service_ticket_validator.rb#8
class OmniAuth::Strategies::CAS::ServiceTicketValidator
  # Build a validator from a +configuration+, a
  # +return_to+ URL, and a +ticket+.
  #
  # @param options [Hash] the OmniAuth Strategy options
  # @param return_to_url [String] the URL of this CAS client service
  # @param ticket [String] the service ticket to validate
  # @return [ServiceTicketValidator] a new instance of ServiceTicketValidator
  #
  # source://omniauth-cas//lib/omniauth/strategies/cas/service_ticket_validator.rb#19
  def initialize(strategy, options, return_to_url, ticket); end

  # Executes a network request to process the CAS Service Response
  #
  # source://omniauth-cas//lib/omniauth/strategies/cas/service_ticket_validator.rb#25
  def call; end

  # Returns the value of attribute success_body.
  #
  # source://omniauth-cas//lib/omniauth/strategies/cas/service_ticket_validator.rb#11
  def success_body; end

  # Request validation of the ticket from the CAS server's
  # serviceValidate (CAS 2.0) function.
  #
  # Swallows all XML parsing errors (and returns +nil+ in those cases).
  #
  # @raise any connection errors encountered.
  # @return [Hash, nil] a user information hash if the response is valid; +nil+ otherwise.
  #
  # source://omniauth-cas//lib/omniauth/strategies/cas/service_ticket_validator.rb#39
  def user_info; end

  private

  # Merges attributes with multiple values into an array if support is
  # enabled (disabled by default)
  #
  # source://omniauth-cas//lib/omniauth/strategies/cas/service_ticket_validator.rb#47
  def attribute_value(user_info, attribute, value); end

  # finds an `<cas:authenticationSuccess>` node in
  # a `<cas:serviceResponse>` body if present; returns nil
  # if the passed body is nil or if there is no such node.
  #
  # source://omniauth-cas//lib/omniauth/strategies/cas/service_ticket_validator.rb#83
  def find_authentication_success(body); end

  # retrieves the `<cas:serviceResponse>` XML from the CAS server
  #
  # source://omniauth-cas//lib/omniauth/strategies/cas/service_ticket_validator.rb#98
  def get_service_response_body; end

  # turns an `<cas:authenticationSuccess>` node into a Hash;
  # returns nil if given nil
  #
  # source://omniauth-cas//lib/omniauth/strategies/cas/service_ticket_validator.rb#57
  def parse_user_info(node); end
end

# source://omniauth-cas//lib/omniauth/strategies/cas/service_ticket_validator.rb#9
OmniAuth::Strategies::CAS::ServiceTicketValidator::VALIDATION_REQUEST_HEADERS = T.let(T.unsafe(nil), Hash)

# source://omniauth-cas//lib/omniauth/cas/version.rb#1
module Omniauth; end

# source://omniauth-cas//lib/omniauth/cas/version.rb#2
module Omniauth::Cas; end

# source://omniauth-cas//lib/omniauth/cas/version.rb#3
Omniauth::Cas::VERSION = T.let(T.unsafe(nil), String)
