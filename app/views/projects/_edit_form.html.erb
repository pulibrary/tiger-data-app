<style>
  .added_user_textbox {
    background-color: #f4f2f2;
    margin-bottom: 2px;
  }

  .delete_icon {
    color: #bb6c6c;
  }

  .add_new_user_textbox {
    margin-left: 30px;
  }

  .add_new_user_div {
    margin-top: -15px;
    margin-bottom: 10px;
  }
</style>

<div>
  <h2>Project Roles</h2>

  <p>Data Sponsor: <input type="text" id="data_sponsor" name="data_sponsor" required autofocus value="<%= @project.metadata[:data_sponsor] %>" /></p>
  <p>Data Manager: <input type="text" id="data_manager" name="data_manager" required value="<%= @project.metadata[:data_manager] %>" /></p>
  <p>Data User(s): </p>

  <div>
    <p>Read Only:</p>
    <ul id="ro-users-list">
      <% (@project.metadata[:data_user_read_only] || []).compact.each do |user| %>
        <span class="ro-user-item" data-uid="<%= user %>"></span>
      <% end %>
    </ul>
    <div class="add_new_user_div">
      <input id="ro-user-uid-to-add" placeholder="netid" class="add_new_user_textbox"></input>
      <%= link_to "Add User", "#", id: "btn-add-ro-user", class: "btn btn-secondary" %>
      <span id="add-ro-user-message"></span>
    </div>
  </div>

  <div>
    <p>Read/Write:</p>
    <ul id = "rw-users-list">
      <% (@project.metadata[:data_user_read_write] || []).compact.each do |user|%>
        <span class="rw-user-item" data-uid="<%= user %>"></span>
      <%end%>
    </ul>
  </div>

  <div class="add_new_user_div">
    <input id = "rw-user-uid-to-add" placeholder = "netid" class="add_new_user_textbox"> </input>
    <%= link_to "Add User", "#", id: "btn-add-rw-user", class: "btn btn-secondary" %>
    <span id = "add-rw-user-message"></span>
  </div>
</div>


<div>
  <h2>Project Description</h2>

  <div>Affiliated Departments:<br/>
    <select id="departments" name="departments[]" class="form-select" multiple >
      <% Affiliation.all.each do |affiliation| %>
        <% if @project.departments.include?(affiliation[:code]) %>
          <option selected><%= affiliation[:code] %></option>
        <% else %>
          <option><%= affiliation[:code] %></option>
        <% end %>
      <% end %>
    </select>
  </div>

  <% if @project.in_mediaflux? %>
    <!--
      Make the field readonly so the user cannot change it, but leave it as an HTML INPUT so that it is
      send back to the controller (we don't want to lose this value)
    -->
    <p>Project Directory: <%= Rails.configuration.mediaflux["api_root_ns"] %>/<input type="text" id="directory" name="directory" readonly value="<%= @project.metadata[:directory] %>" />
      (MediaFlux id: <%= @project.mediaflux_id %>)<br/>
      This project has already been saved to Mediaflux and the directory cannot be changed</p>
  <% else %>
    <p>Project Directory: <%= Rails.configuration.mediaflux["api_root_ns"] %>/<input type="text" id="directory" name="directory" required value="<%= @project.metadata[:directory] %>" /></p>
  <% end %>

  <p>Title: <input type="text" id="title" name="title" required value="<%= @project.metadata[:title] %>" /></p>
  <p>Description:
    <textarea type="text" id="description" name="description" class="input-text-long"
      rows="5" cols="120" placeholder=""><%= @project.metadata[:description] %></textarea>
  </p>
</div>

<!-- Keeps track of added read-only and read-write users -->
<input type="text" id="ro_user_counter" name="ro_user_counter" value="0" style="display:none;"/>
<input type="text" id="rw_user_counter" name="rw_user_counter" value="0" style="display:none;"/>

<div class="actions">
  <input type="submit" class="btn btn-primary" value="Save" />
</div>

<script>
  $(() => {
    var counterIncrement = function(counterId) {
      var counter = parseInt($(`#${counterId}`).val(), 10);
      counter += 1;
      $(`#${counterId}`).val(counter);
      return counter;
    }

    var addUserHtml = function(netIdToAdd, elementId, listElementId, textElementId) {
      var html = `<input id="${elementId}" name="${elementId}" value="${netIdToAdd}" readonly class="added_user_textbox" />
        <span id="${elementId}_delete_icon">
          <a class="delete-ro-user" data-el-id="${elementId}" data-uid="${netIdToAdd}" href="#" title="Revoke user ability to read">
              <i class="bi bi-trash delete_icon" data-el-id="${elementId}" data-uid="${netIdToAdd}"></i>
          </a>
          <br/>
        </span>`;
      $(`#${listElementId}`).append(html);
      $(`#${textElementId}`).val("");
      $(`#${textElementId}`).focus();
    }

    // Adds a read-only user
    $('#btn-add-ro-user').on('click', () => {
      var netIdToAdd = $('#ro-user-uid-to-add').val();
      if (netIdToAdd.trim() === "") {
        // nothing to do
        return false;
      }

      var counter = counterIncrement('ro_user_counter');
      var roUserId = `ro_user_${counter}`;
      addUserHtml(netIdToAdd, roUserId, 'ro-users-list', 'ro-user-uid-to-add');
      return false;
    });

    // Adds a read-write user
    $('#btn-add-rw-user').on('click', () => {
      var netIdToAdd = $('#rw-user-uid-to-add').val();
      if (netIdToAdd.trim() === "") {
        // nothing to do
        return false;
      }

      var counter = counterIncrement('rw_user_counter');
      var rwUserId = `rw_user_${counter}`;
      addUserHtml(netIdToAdd, rwUserId, 'rw-users-list', 'rw-user-uid-to-add');
      return false;
    });

    // Wire up the delete button for all read-only users.
    //
    // Notice the use of $(document).on("click", selector, ...) instead of the
    // typical $(selector).on("click", ...). This syntax is required so that
    // we can detect the click even on HTML elements _added on the fly_ which
    // is the case when a user adds a new submitter or admin to the group.
    // Reference: https://stackoverflow.com/a/17086311/446681
    $(document).on('click', '.delete-ro-user', (el) => {
      var uid = $(el.target).data('uid');
      var ro_user_id = $(el.target).data('el-id');
      var ro_user_delete_icon = ro_user_id + "_delete_icon";
      const message = `Revoke read-only access to user ${uid}`;
      if (window.confirm(message)) {
        $("#" + ro_user_id).remove();
        $("#" + ro_user_delete_icon).remove();
      }
      return false;
    });

    // Wire up the delete button for all read-write users.
    $(document).on('click', '.delete-rw-user', (el) => {
      var uid = $(el.target).data('uid');
      var rw_user_id = $(el.target).data('el-id');
      var rw_user_delete_icon = rw_user_id + "_delete_icon";
      const message = `Revoke read-write access to user ${uid}`;
      if (window.confirm(message)) {
        $("#" + rw_user_id).remove();
        $("#" + rw_user_delete_icon).remove();
      }
      return false;
    });

    // Render the pre-existing read-only users on the record
    $('.ro-user-item').each((ix, el) => {
      var counter = counterIncrement('ro_user_counter');
      var roUserId = `ro_user_${counter}`;
      var netIdToAdd = $(el).data("uid");
      addUserHtml(netIdToAdd, roUserId, 'ro-users-list', 'ro-user-uid-to-add');
    });

    // Render the pre-existing read-write users on the record
    $('.rw-user-item').each((ix, el) => {
      var counter = counterIncrement('rw_user_counter');
      var rwUserId = `rw_user_${counter}`;
      var netIdToAdd = $(el).data("uid");
      addUserHtml(netIdToAdd, rwUserId, 'rw-users-list', 'rw-user-uid-to-add');
    });
  })
</script>
