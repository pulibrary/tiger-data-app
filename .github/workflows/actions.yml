name: Auto-build docs
run-name: Build and publish documentation
on: [push]
jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "🖥️ The workflow is now ready to test your code on the runner."
      - uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically
      - run: bundle exec yard --output-dir github-pages
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}
      - uses: actions/upload-artifact@v3
        with:
          # Name of the artifact to upload.
          name: "github-pages" 

          # A file, directory or wildcard pattern that describes what to upload
          # Required.
          path: github-pages

      - run: echo "🍏 This job's status is ${{ job.status }}."
  # Deploy job
  deploy:
    # Add a dependency to the build job
    # needs: build

    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
    permissions:
      contents: read
      pages: write
      id-token: write

    # Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
    # However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
    concurrency:
      group: "pages"
      cancel-in-progress: false

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically
      - run: bundle exec yard --output-dir github-pages
      - name: Setup Pages
        uses: actions/configure-pages@v4
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload generated documentation
          path: './github-pages'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4